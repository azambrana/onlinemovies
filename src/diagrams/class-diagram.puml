@startuml
'https://plantuml.com/class-diagram

'RBAC role based access control
'CRUD Create Read Update Delete

interface AuthorizationService
interface UserService
interface PermissionService
interface ResourceService

interface MovieRepository
interface UserRepository
interface RoleRepository
interface ResourceRepository
interface PermissionRepository

class User
class Role
class UserRole
class Permission
class Movie

class RolePermission

User o-- Role
User o-- Permission
Role o-- Permission
Permission o-- Resource

RolePermission o-- Permission
RolePermission o-- Role

UserRole o-- User
UserRole o-- Role

Media *-- Actor
Movie o-- Actor
TVShow o-- Actor
Season *-- Episode
Season o-- Actor
Episode o-- Actor

AuthorizationService -- User
AuthorizationService -- Permission
AuthorizationService -- Resource

AuthorizationService o-- UserService
AuthorizationService o-- PermissionService
AuthorizationService o-- ResourceService

' entities
Person <|-- User
Person <|-- Actor
Person <|-- Director
User *-- Contact
Contact *-- PhoneNumber
Contact *-- Address
Actor o-- Media
Director o-- Movie

class Person {
    - id: Long
    - firstName: String
    - lastName: String
    - fullName: String
    - gender: String
    - dob: Date
}

class User extends Person {
    - contact: Contact
    - credential: Credential
    ' getter and setters
}

class Contact {
    - phone: PhoneNumber
    - address: Address
    - email: String
}

class Credential {
    - username: String
    - password: String
}

class PhoneNumber {
    - number: String
    - dialCode: Integer
    - countryCode: String
}

class Address {
    - addressLines: List<String>
}

class Actor extends Person {
    - media: Set<Media>
}

class Director extends Person {
    - media: Set<Media>
}

class Role {
    -id: Long
    -name: String
    -description: String
    -permissions: Set<Permission>

    ' getter and setters
}

class Permission {
    -id
    -name
    -resources: Set<Resource>
    ' getter and setters
}

class Resource {
    -id
    -name
    ' getter and setters
}

class Media {
    - id: Long
    - title: String
    - genre: String
    - actors: Set<Actor>

    ' getter and setters
}

class Movie extends Media {
    - year: String

    ' getter and setters
}

class TvShow extends Media {
    -totalSeasons: Int
    -totalEpisodes: Int
    -actors: Set<Actor>
    -seasons: Set<Season>

    ' getter and setters
}
class Season {
    - year: String
    - actors: Set<Actor>
    - episodes: Set<Episode>;

    ' getter and setters
}

class Episode {
    actors: Set<Actor>
}

' dtos

class UserDto {
    -id: Long
    -firstName: String
    -lastName: String
    -username: String
    -password: String
    -email: String

    ' getter and setters
}


class MovieDto {
    id: Long
    title: String
    genre: String
    year: String

    ' getter and setters
}
' interfaces

interface AuthorizationService {
    +hasPermission(user: User, permission: Permission, resource: Resource)
    +hasPermission(userName: String, permissionName: String, resourceName: String)
    +hasRole(user, role)
}

interface AuthenticationService {
    +login(username, password)
    +logout()
    +isThereAnySession(session: HttpServletRequest): boolean
}

' controllers

UserService -- UserDto
UserService -- User
TvShowRepository -- User
UserController o-- UserService
UserController o-- AuthorizationService
UserController o-- AuthenticationService

class UserController {
    +createUser(user: User)
    +readUser(id: Long)
    +updateUser(user: User)
    +deleteUser(id: Long)
}

MovieService -- MovieDto
MovieService -- Movie
MovieService o-- MovieRepository
MovieController o-- MovieService
MovieController o-- AuthorizationService

class UserController <<@RestController>> <<@RequestMapping("/users")>> {
    - <<@Autowired>> authenticationService: AuthenticationService;

    + <<PostMapping>> register(<<ResourceBody>> userDto: UserDto, request: HttpServletRequest): UserDto
    + <<PostMapping>> login(@RequestHeader("Authentication") authenticationHeader: String): String
}

class MovieController <<@RestController>> <<@RequestMapping("/movies")>> {
    - <<@Autowired>> movieService: MovieService
    - <<@Autowired>> authorizationService: AuthorizationService;

    + <<PostMapping>> createMovie(@RequestHeader("Authorization") authorizationHeader: String, @RequestBody movieDto: MovieDto): MovieDto
    + <<GetMapping>> getAllMovies(@RequestHeader("Authorization") authorizationHeader: String): List<MovieDto>
}

TvShowController o-- TvShowService
TvShowController o-- AuthorizationService
TvShowService o-- TvShowRepository

TvShowRepository -- TvShow

class TvShowController <<@RestController>> <<@RequestMapping("/tvshows")>> {
    - <<@Autowired>> movieService: MovieService
    - <<@Autowired>> authorizationService: AuthorizationService;

    + <<PostMapping>> createTvShow(@RequestHeader("Authorization") authorizationHeader: String, @RequestBody tvShowDto: TvShowDto): TvShowDto
    + <<GetMapping>> getAllTvShows(@RequestHeader("Authorization") authorizationHeader: String): List<TvShowDto>
}

@enduml